{"version":3,"sources":["CustomArgs.js","App.js","DefaultQueries.js","serviceWorker.js","index.js"],"names":["unwrapOutputType","outputType","unwrappedType","isWrappingType","ofType","makeDefaultArg","parentField","arg","type","name","startsWith","endsWith","getDefaultScalarArgValue","argType","kind","value","isEnumType","getValues","map","x","includes","GraphiQLExplorer","defaultValue","retrivedObject","localStorage","getItem","testObject","JSON","parse","urlValue","initialUrl","defaultUrl","fetcher","params","fetch","method","headers","Accept","body","stringify","then","response","text","responseBody","e","console","log","App","Component","constructor","props","super","_handleInspectOperation","cm","mousePos","parsedQuery","this","state","query","error","token","getTokenAt","start","line","ch","end","position","indexFromPos","def","definitions","find","definition","loc","operationKind","operation","operationName","selector","el","document","querySelector","scrollIntoView","_handleEditQuery","setState","_handleToggleExplorer","explorerIsOpen","schema","customUrl","inputTextValue","handleChange","bind","handleSubmit","event","target","setItem","documentElement","scrollTop","window","location","reload","preventDefault","componentDidMount","getIntrospectionQuery","result","editor","_graphiql","getQueryEditor","setOption","options","extraKeys","buildClientSchema","data","render","class","className","href","onEdit","onRunOperation","handleRunQuery","onToggleExplorer","ref","onEditQuery","Toolbar","Button","onClick","handlePrettifyQuery","label","title","handleToggleHistory","onSubmit","onChange","UsePublicGraphql","url","Boolean","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oUAeA,SAASA,EAAiBC,GACxB,IAAIC,EAAgBD,EACpB,KAAOE,YAAeD,IACpBA,EAAgBA,EAAcE,OAEhC,OAAOF,EAGF,SAASG,EACdC,EACAC,GAEA,MAAML,EAAgBF,EAAiBM,EAAYE,MACnD,SACEN,EAAcO,KAAKC,WAAW,YAC9BR,EAAcO,KAAKE,SAAS,eACd,UAAbJ,EAAIE,MAAiC,YAAbF,EAAIE,MAO1B,SAASG,EACdN,EACAC,EACAM,GAEA,MAAMX,EAAgBF,EAAiBM,EAAYE,MACnD,OAAQN,EAAcO,MACpB,IAAK,mBACH,GAAiB,SAAbF,EAAIE,KACN,MAAO,CAAEK,KAAM,cAAeC,MAAO,cAChC,GAAiB,UAAbR,EAAIE,KACb,MAAO,CAAEK,KAAM,cAAeC,MAAO,WAEvC,MACF,IAAK,aACH,GAAiB,SAAbR,EAAIE,KACN,MAAO,CAAEK,KAAM,cAAeC,MAAO,WAEvC,MACF,QACE,GACEC,YAAWH,IACXX,EAAcO,KAAKC,WAAW,WAC9BR,EAAcO,KAAKE,SAAS,cAC5B,CACA,GACe,cAAbJ,EAAIE,MACJI,EACGI,YACAC,IAAIC,GAAKA,EAAEV,MACXW,SAAS,QAEZ,MAAO,CAAEN,KAAM,YAAaC,MAAO,QAC9B,GACQ,UAAbR,EAAIE,MACJI,EACGI,YACAC,IAAIC,GAAKA,EAAEV,MACXW,SAAS,cAEZ,MAAO,CAAEN,KAAM,YAAaC,MAAO,cAGvC,OAAOM,IAAiBC,aAAaT,GAEzC,OAAOQ,IAAiBC,aAAaT,G,cCrEvC,IAAIU,EAAiBC,aAAaC,QAAQ,cACtCC,EAAaC,KAAKC,MAAML,GACxBM,EAAQ,OAAGH,QAAH,IAAGA,OAAH,EAAGA,EAAYG,SAE3B,MAAMC,EAAa,uCAIbC,EAAaF,GAAYC,EAI/B,SAASE,EAAQC,GACf,OAAOC,MAAMH,EAAY,CACvBI,OAAQ,OACRC,QAAS,CACPC,OAAQ,mBACR,eAAgB,oBAElBC,KAAMX,KAAKY,UAAUN,KAEpBO,MAAK,SAAUC,GACd,OAAOA,EAASC,UAEjBF,MAAK,SAAUG,GACd,IACE,OAAOhB,KAAKC,MAAMe,GAClB,MAAOC,GACP,OAAOD,MAlBfE,QAAQC,IAAI,oBAAqBjB,GA6BjC,MAAMkB,UAAYC,YAUhBC,YAAYC,GACVC,MAAMD,GADW,KAgDnBE,wBAA0B,CACxBC,EACAC,KAEA,MAAMC,EAAc3B,YAAM4B,KAAKC,MAAMC,OAAS,IAE9C,IAAKH,EAEH,OADAV,QAAQc,MAAM,iCACP,KAGT,IAAIC,EAAQP,EAAGQ,WAAWP,GACtBQ,EAAQ,CAAEC,KAAMT,EAASS,KAAMC,GAAIJ,EAAME,OACzCG,EAAM,CAAEF,KAAMT,EAASS,KAAMC,GAAIJ,EAAMK,KAMvCC,EALmB,CACrBJ,MAAOT,EAAGc,aAAaL,GACvBG,IAAKZ,EAAGc,aAAaF,IAKnBG,EAAMb,EAAYc,YAAYC,KAAMC,IACtC,IAAKA,EAAWC,IAEd,OADA3B,QAAQC,IAAI,gDACL,EAH4C,QAM9ByB,EAAWC,IAA1BV,EAN6C,EAM7CA,MAAOG,EANsC,EAMtCA,IACf,OAAOH,GAASI,EAASJ,OAASG,GAAOC,EAASD,MAGpD,IAAKG,EAIH,OAHAvB,QAAQc,MACN,6DAEK,KAGT,IAAIc,EACW,wBAAbL,EAAItD,KACAsD,EAAIM,UACS,uBAAbN,EAAItD,KACJ,WACA,UAEF6D,EACW,wBAAbP,EAAItD,MAAoCsD,EAAI3D,MAE3B,uBAAb2D,EAAItD,MAAmCsD,EAAI3D,KAD3C2D,EAAI3D,KAAKM,MAGT,UAEF6D,EAAQ,mCAA+BH,EAA/B,YAAgDE,GAExDE,EAAKC,SAASC,cAAcH,GAChCC,GAAMA,EAAGG,kBAvGQ,KA0GnBC,iBAAoBvB,GAAwBF,KAAK0B,SAAS,CAAExB,UA1GzC,KA4GnByB,sBAAwB,KACtB3B,KAAK0B,SAAS,CAAEE,gBAAiB5B,KAAKC,MAAM2B,kBA3G5C5B,KAAKC,MAAQ,CACX4B,OAAQ,KACRD,gBAAgB,EAChB1B,MCpEoB,GDqEpB4B,UAAWvD,EACXwD,eAAgBxD,GAGlByB,KAAKgC,aAAehC,KAAKgC,aAAaC,KAAKjC,MAC3CA,KAAKkC,aAAelC,KAAKkC,aAAaD,KAAKjC,MAE7CgC,aAAaG,GACXnC,KAAK0B,SAAS,CAAEK,eAAgBI,EAAMC,OAAO7E,QAG/C2E,aAAaC,GACX,IAAIjE,EAAa,CAAEG,SAAU2B,KAAKC,MAAM8B,gBAMxC/D,aAAaqE,QAAQ,aAAclE,KAAKY,UAAUb,IAClD,IAAIH,EAAiBC,aAAaC,QAAQ,cACpCI,EAAaF,KAAKC,MAAML,GAAxBM,SACNgB,QAAQC,IAAI,qCAAsCjB,GAClDiD,SAASgB,gBAAgBC,UAAY,EACrCC,OAAOC,SAASC,SAEhBP,EAAMQ,iBAIRC,oBACEpE,EAAQ,CACN0B,MAAO2C,gBACN7D,KAAM8D,IACP,MAAMC,EAAS/C,KAAKgD,UAAUC,iBAC9BF,EAAOG,UAAU,YAAjB,2BACMH,EAAOI,QAAQC,WAAa,IADlC,IAEE,sBAAuBpD,KAAKJ,2BAE9BI,KAAK0B,SAAS,CAAEG,OAAQwB,YAAkBP,EAAOQ,UAoErDC,SAAU,MAAD,EACmBvD,KAAKC,MAAvBC,EADD,EACCA,MAAO2B,EADR,EACQA,OACf,OACE,yBAAK2B,MAAM,iBACT,yBAAKC,UAAU,gBACb,uBAAGC,KAAK,0BAAR,mBAEF,kDAAuB,6BAAvB,oCAA8EnF,GAC9E,oIACA,6BACA,6BACA,yBAAKkF,UAAU,sBACb,kBAAC,IAAD,CACE5B,OAAQA,EACR3B,MAAOA,EACPyD,OAAQ3D,KAAKyB,iBACbmC,eAAiBzC,GACfnB,KAAKgD,UAAUa,eAAe1C,GAEhCS,eAAgB5B,KAAKC,MAAM2B,eAC3BkC,iBAAkB9D,KAAK2B,sBACvBvE,yBAA0BA,EAC1BP,eAAgBA,IAElB,kBAAC,IAAD,CACEkH,IAAMA,GAAS/D,KAAKgD,UAAYe,EAChCvF,QAASA,EACTqD,OAAQA,EACR3B,MAAOA,EACP8D,YAAahE,KAAKyB,kBAElB,kBAAC,IAASwC,QAAV,KACE,kBAAC,IAASC,OAAV,CACEC,QAAS,IAAMnE,KAAKgD,UAAUoB,sBAC9BC,MAAM,WACNC,MAAM,kCAER,kBAAC,IAASJ,OAAV,CACEC,QAAS,IAAMnE,KAAKgD,UAAUuB,sBAC9BF,MAAM,UACNC,MAAM,iBAER,kBAAC,IAASJ,OAAV,CACEC,QAASnE,KAAK2B,sBACd0C,MAAM,WACNC,MAAM,uBAKd,0BAAME,SAAUxE,KAAKkC,cACnB,+BACE,4DACA,2BACEuB,UAAU,sBACVzG,KAAK,OACLO,MAAOyC,KAAKC,MAAM8B,eAClB0C,SAAUzE,KAAKgC,gBAUnB,6BACA,yGAEF,4BACAyB,UAAU,cACRU,QAAS,KACPnG,aAAaqE,QACX,aACAlE,KAAKY,UAAU,CAAEV,SAAUC,KAE7BgD,SAASgB,gBAAgBC,UAAY,EACrCC,OAAOC,SAASC,WARpB,aAaA,6BACA,kMACA,6BACA,0EACA,oGAA6D,6BAC7D,kBAACgC,EAAD,CAAkBC,IAAI,kCACtB,kBAACD,EAAD,CAAkBC,IAAI,0CACtB,kBAACD,EAAD,CAAkBC,IAAI,wCACtB,kBAACD,EAAD,CAAkBC,IAAI,+CACtB,kBAACD,EAAD,CAAkBC,IAAI,iCACtB,kBAACD,EAAD,CAAkBC,IAAI,yCACtB,kBAACD,EAAD,CAAkBC,IAAI,8BACtB,kBAACD,EAAD,CAAkBC,IAAI,8BACtB,kBAACD,EAAD,CAAkBC,IAAI,uCACtB,kBAACD,EAAD,CAAkBC,IAAI,oDACtB,kBAACD,EAAD,CAAkBC,IAAI,qCACtB,kBAACD,EAAD,CAAkBC,IAAI,qDACtB,kBAACD,EAAD,CAAkBC,IAAI,qDACtB,kBAACD,EAAD,CAAkBC,IAAI,wCACtB,kBAACD,EAAD,CAAkBC,IAAI,+CAExB,6BACA,6BAtGA,mBAuGgB,uBAAGjB,KAAK,yDAAR,sBAAsF,6BAvGtG,kBAwGe,uBAAGA,KAAK,wDAAR,kCACf,6BAzGA,mFAyGqF,6BACrF,6BA1GA,sBA4GA,6BA5GA,cA6GW,uBAAGA,KAAK,sCAAR,kBAMjB,MAAMgB,EAAmB,EAAEC,SAGvB,4BAAQnB,MAAM,mBACdW,QAAS,KACPnG,aAAaqE,QACX,aACAlE,KAAKY,UAAU,CAAEV,SAAUsG,KAE7BrD,SAASgB,gBAAgBC,UAAY,EACrCC,OAAOC,SAASC,WAGjBiC,GAMUpF,QE5SKqF,QACW,cAA7BpC,OAAOC,SAASoC,UAEe,UAA7BrC,OAAOC,SAASoC,UAEhBrC,OAAOC,SAASoC,SAASC,MACvB,2DCZNC,IAASxB,OAAO,kBAAC,EAAD,MAASjC,SAAS0D,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnG,KAAKoG,IACjCA,EAAaC,iB","file":"static/js/main.162f608f.chunk.js","sourcesContent":["// flow\r\n\r\nimport GraphiQLExplorer from \"graphiql-explorer\";\r\nimport { isEnumType, isWrappingType } from \"graphql\";\r\n\r\nimport type {\r\n  GraphQLField,\r\n  GraphQLArgument,\r\n  GraphQLInputField,\r\n  GraphQLEnumType,\r\n  GraphQLOutputType,\r\n  GraphQLScalarType,\r\n  ValueNode\r\n} from \"graphql\";\r\n\r\nfunction unwrapOutputType(outputType: GraphQLOutputType): * {\r\n  let unwrappedType = outputType;\r\n  while (isWrappingType(unwrappedType)) {\r\n    unwrappedType = unwrappedType.ofType;\r\n  }\r\n  return unwrappedType;\r\n}\r\n\r\nexport function makeDefaultArg(\r\n  parentField: GraphQLField<any, any>,\r\n  arg: GraphQLArgument | GraphQLInputField\r\n): boolean {\r\n  const unwrappedType = unwrapOutputType(parentField.type);\r\n  if (\r\n    unwrappedType.name.startsWith(\"GitHub\") &&\r\n    unwrappedType.name.endsWith(\"Connection\") &&\r\n    (arg.name === \"first\" || arg.name === \"orderBy\")\r\n  ) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nexport function getDefaultScalarArgValue(\r\n  parentField: GraphQLField<any, any>,\r\n  arg: GraphQLArgument | GraphQLInputField,\r\n  argType: GraphQLEnumType | GraphQLScalarType\r\n): ValueNode {\r\n  const unwrappedType = unwrapOutputType(parentField.type);\r\n  switch (unwrappedType.name) {\r\n    case \"GitHubRepository\":\r\n      if (arg.name === \"name\") {\r\n        return { kind: \"StringValue\", value: \"graphql-js\" };\r\n      } else if (arg.name === \"owner\") {\r\n        return { kind: \"StringValue\", value: \"graphql\" };\r\n      }\r\n      break;\r\n    case \"NpmPackage\":\r\n      if (arg.name === \"name\") {\r\n        return { kind: \"StringValue\", value: \"graphql\" };\r\n      }\r\n      break;\r\n    default:\r\n      if (\r\n        isEnumType(argType) &&\r\n        unwrappedType.name.startsWith(\"GitHub\") &&\r\n        unwrappedType.name.endsWith(\"Connection\")\r\n      ) {\r\n        if (\r\n          arg.name === \"direction\" &&\r\n          argType\r\n            .getValues()\r\n            .map(x => x.name)\r\n            .includes(\"DESC\")\r\n        ) {\r\n          return { kind: \"EnumValue\", value: \"DESC\" };\r\n        } else if (\r\n          arg.name === \"field\" &&\r\n          argType\r\n            .getValues()\r\n            .map(x => x.name)\r\n            .includes(\"CREATED_AT\")\r\n        ) {\r\n          return { kind: \"EnumValue\", value: \"CREATED_AT\" };\r\n        }\r\n      }\r\n      return GraphiQLExplorer.defaultValue(argType);\r\n  }\r\n  return GraphiQLExplorer.defaultValue(argType);\r\n}\r\n","/* eslint-disable */\r\nimport React, { Component } from \"react\";\r\nimport GraphiQL from \"graphiql\";\r\nimport GraphiQLExplorer from \"graphiql-explorer\";\r\nimport { buildClientSchema, getIntrospectionQuery, parse } from \"graphql\";\r\n\r\nimport { makeDefaultArg, getDefaultScalarArgValue } from \"./CustomArgs\";\r\n\r\nimport \"graphiql/graphiql.css\";\r\nimport \"./App.css\";\r\nimport { DEFAULT_QUERY } from \"./DefaultQueries\";\r\n\r\nimport type { GraphQLSchema } from \"graphql\";\r\n\r\nlet retrivedObject = localStorage.getItem(\"testObject\");\r\nlet testObject = JSON.parse(retrivedObject);\r\nlet urlValue = testObject?.urlValue;\r\n\r\nconst initialUrl = \"https://api.react-finland.fi/graphql\";\r\n// const initialUrl = \"https://my-graphqlmiddleware.glitch.me/graphql\";\r\n// const initialUrl = \"https://my-graphqlmiddleware.glitch.me/graphql\";\r\n\r\nconst defaultUrl = urlValue || initialUrl;\r\n\r\nconsole.log(\"Starting of app=>\", urlValue);\r\n\r\nfunction fetcher(params: Object): Object {\r\n  return fetch(defaultUrl, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify(params)\r\n  })\r\n    .then(function (response) {\r\n      return response.text();\r\n    })\r\n    .then(function (responseBody) {\r\n      try {\r\n        return JSON.parse(responseBody);\r\n      } catch (e) {\r\n        return responseBody;\r\n      }\r\n    });\r\n}\r\n\r\ntype State = {\r\n  schema: ?GraphQLSchema,\r\n  query: string,\r\n  explorerIsOpen: boolean\r\n};\r\n\r\nclass App extends Component<{}, State> {\r\n  _graphiql: GraphiQL;\r\n  // state = {\r\n  //   schema: null,\r\n  //   explorerIsOpen: true,\r\n  //   query: DEFAULT_QUERY,\r\n  //   customUrl: defaultUrl,\r\n  //   inputTextValue: defaultUrl\r\n  // };\r\n  /* sahil code below */\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      schema: null,\r\n      explorerIsOpen: true,\r\n      query: DEFAULT_QUERY,\r\n      customUrl: defaultUrl,\r\n      inputTextValue: defaultUrl\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n  handleChange(event) {\r\n    this.setState({ inputTextValue: event.target.value });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    let testObject = { urlValue: this.state.inputTextValue };\r\n    // alert(\r\n    //   \"Url saved: \" +\r\n    //     this.state.inputTextValue +\r\n    //     \" Please refresh to get `Explore` show related queries.\"\r\n    // );/* COMMENTED TEMPORARILY */\r\n    localStorage.setItem(\"testObject\", JSON.stringify(testObject));\r\n    let retrivedObject = localStorage.getItem(\"testObject\");\r\n    let { urlValue } = JSON.parse(retrivedObject);\r\n    console.log(\"Submitted: testObject.urlValue => \", urlValue);\r\n    document.documentElement.scrollTop = 0;\r\n    window.location.reload(); /* This is magic!! */\r\n\r\n    event.preventDefault();\r\n  }\r\n  /* sahil code above */\r\n\r\n  componentDidMount() {\r\n    fetcher({\r\n      query: getIntrospectionQuery()\r\n    }).then((result) => {\r\n      const editor = this._graphiql.getQueryEditor();\r\n      editor.setOption(\"extraKeys\", {\r\n        ...(editor.options.extraKeys || {}),\r\n        \"Shift-Alt-LeftClick\": this._handleInspectOperation\r\n      });\r\n      this.setState({ schema: buildClientSchema(result.data) });\r\n    });\r\n  }\r\n\r\n  _handleInspectOperation = (\r\n    cm: any,\r\n    mousePos: { line: Number, ch: Number }\r\n  ) => {\r\n    const parsedQuery = parse(this.state.query || \"\");\r\n\r\n    if (!parsedQuery) {\r\n      console.error(\"Couldn't parse query document\");\r\n      return null;\r\n    }\r\n\r\n    var token = cm.getTokenAt(mousePos);\r\n    var start = { line: mousePos.line, ch: token.start };\r\n    var end = { line: mousePos.line, ch: token.end };\r\n    var relevantMousePos = {\r\n      start: cm.indexFromPos(start),\r\n      end: cm.indexFromPos(end)\r\n    };\r\n\r\n    var position = relevantMousePos;\r\n\r\n    var def = parsedQuery.definitions.find((definition) => {\r\n      if (!definition.loc) {\r\n        console.log(\"Missing location information for definition\");\r\n        return false;\r\n      }\r\n\r\n      const { start, end } = definition.loc;\r\n      return start <= position.start && end >= position.end;\r\n    });\r\n\r\n    if (!def) {\r\n      console.error(\r\n        \"Unable to find definition corresponding to mouse position\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var operationKind =\r\n      def.kind === \"OperationDefinition\"\r\n        ? def.operation\r\n        : def.kind === \"FragmentDefinition\"\r\n        ? \"fragment\"\r\n        : \"unknown\";\r\n\r\n    var operationName =\r\n      def.kind === \"OperationDefinition\" && !!def.name\r\n        ? def.name.value\r\n        : def.kind === \"FragmentDefinition\" && !!def.name\r\n        ? def.name.value\r\n        : \"unknown\";\r\n\r\n    var selector = `.graphiql-explorer-root #${operationKind}-${operationName}`;\r\n\r\n    var el = document.querySelector(selector);\r\n    el && el.scrollIntoView();\r\n  };\r\n\r\n  _handleEditQuery = (query: string): void => this.setState({ query });\r\n\r\n  _handleToggleExplorer = () => {\r\n    this.setState({ explorerIsOpen: !this.state.explorerIsOpen });\r\n  };\r\n\r\n  render() {\r\n    const { query, schema } = this.state;\r\n    return (\r\n      <div class=\"mainContainer\">\r\n        <div className=\"websiteTitle\">\r\n          <a href=\"https://abstraction.ml\">Abstraction.ml</a>\r\n        </div>\r\n        <h1>Querying Graphql @ <br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{defaultUrl}</h1>\r\n        <strong>Tip: Scroll page, to see options to change graphql endpoint url, or use some public graphql api.</strong>\r\n        <br/>\r\n        <br/>\r\n        <div className=\"graphiql-container\">\r\n          <GraphiQLExplorer\r\n            schema={schema}\r\n            query={query}\r\n            onEdit={this._handleEditQuery}\r\n            onRunOperation={(operationName) =>\r\n              this._graphiql.handleRunQuery(operationName)\r\n            }\r\n            explorerIsOpen={this.state.explorerIsOpen}\r\n            onToggleExplorer={this._handleToggleExplorer}\r\n            getDefaultScalarArgValue={getDefaultScalarArgValue}\r\n            makeDefaultArg={makeDefaultArg}\r\n          />\r\n          <GraphiQL\r\n            ref={(ref) => (this._graphiql = ref)}\r\n            fetcher={fetcher}\r\n            schema={schema}\r\n            query={query}\r\n            onEditQuery={this._handleEditQuery}\r\n          >\r\n            <GraphiQL.Toolbar>\r\n              <GraphiQL.Button\r\n                onClick={() => this._graphiql.handlePrettifyQuery()}\r\n                label=\"Prettify\"\r\n                title=\"Prettify Query (Shift-Ctrl-P)\"\r\n              />\r\n              <GraphiQL.Button\r\n                onClick={() => this._graphiql.handleToggleHistory()}\r\n                label=\"History\"\r\n                title=\"Show History\"\r\n              />\r\n              <GraphiQL.Button\r\n                onClick={this._handleToggleExplorer}\r\n                label=\"Explorer\"\r\n                title=\"Toggle Explorer\"\r\n              />\r\n            </GraphiQL.Toolbar>\r\n          </GraphiQL>\r\n        </div>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label>\r\n            <h1>Use any Graphql Endpoint Url</h1>\r\n            <input\r\n              className=\"myGraphqlInputSahil\"\r\n              type=\"text\"\r\n              value={this.state.inputTextValue}\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n          {/* <strong> This button is redundant, coz I can just use `Enter` key submit.\r\n            <input\r\n              class=\"inputSubmitButton\"\r\n              type=\"submit\"\r\n              value=\"Update graphiql's environment\"\r\n            />\r\n          </strong> */}\r\n          <br/>\r\n          <strong>😆Tip: Press `Enter` key to update OneGrahph 😆 </strong>\r\n        </form>\r\n        <button\r\n        className=\"resetButton\"\r\n          onClick={() => {\r\n            localStorage.setItem(\r\n              \"testObject\",\r\n              JSON.stringify({ urlValue: initialUrl })\r\n            );\r\n            document.documentElement.scrollTop = 0;\r\n            window.location.reload();\r\n          }}\r\n        >\r\n          Reset App\r\n        </button>\r\n        <br/>\r\n        <strong>Tip: To use with your locally running graphQL server, either choose ``http://localhost:5000/graphql`` from the list below or enter your endpoint url manually.</strong>\r\n        <br/>\r\n        <h1>Choose any public graphql api from below -</h1>\r\n        <strong>😇Tip: Click to the url itself, to use it.😇</strong><br/>\r\n        <UsePublicGraphql url=\"http://localhost:5000/graphql\" />\r\n        <UsePublicGraphql url=\"https://www.graphqlapptest.ml/graphql\" />\r\n        <UsePublicGraphql url=\"https://countries.trevorblades.com/\" />\r\n        <UsePublicGraphql url=\"https://countries-274616.ew.r.appspot.com/\" />\r\n        <UsePublicGraphql url=\"https://api.travelgatex.com/\" />\r\n        <UsePublicGraphql url=\"https://api.react-finland.fi/graphql\" />\r\n        <UsePublicGraphql url=\"https://api.graphql.jobs/\" />\r\n        <UsePublicGraphql url=\"https://etmdb.com/graphql\" />\r\n        <UsePublicGraphql url=\"https://graphbrainz.herokuapp.com/\" />\r\n        <UsePublicGraphql url=\"https://graphql-camara-deputados.herokuapp.com/\" />\r\n        <UsePublicGraphql url=\"https://api.spacex.land/graphql/\" />\r\n        <UsePublicGraphql url=\"https://graphql-compose.herokuapp.com/northwind/\" />\r\n        <UsePublicGraphql url=\"https://directions-graphql.herokuapp.com/graphql\" />\r\n        <UsePublicGraphql url=\"https://rickandmortyapi.com/graphql\" />\r\n        <UsePublicGraphql url=\"https://graphql-weather-api.herokuapp.com/\" />\r\n      {/* <UsePublicGraphql url=\"\" /> */}\r\n      <hr/>\r\n      <br/>\r\n      Resources used: <a href=\"https://github.com/OneGraph/graphiql-explorer-example\">One Graph's Client</a><br/>\r\n      Code @ github: <a href=\"https://github.com/sahilrajput03/OneGraphMissionDone\">OneGraphMissionDone Repository</a>\r\n      <br/>If you wish to add something(anything), you may create a pull request on github.<br/>\r\n      <br/>\r\n      Thanks.😉 \r\n      <br/>\r\n      Created by <a href=\"https://twitter.com/freakstarrocks\">Sahil Rajput</a>\r\n  </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst UsePublicGraphql = ({url}) => {\r\n\r\n  return (\r\n    <button class=\"UsePublicGraphql\"\r\n    onClick={() => {\r\n      localStorage.setItem(\r\n        \"testObject\",\r\n        JSON.stringify({ urlValue: url })\r\n      );\r\n      document.documentElement.scrollTop = 0;/* This is amazing! */\r\n      window.location.reload();\r\n    }}\r\n  >\r\n    {url}\r\n  </button>\r\n\r\n  )\r\n}\r\n\r\nexport default App;\r\n","export const DEFAULT_QUERY = ``;\r\n// export const DEFAULT_QUERY = `\r\n// query MyQuery {\r\n//   hello\r\n// }\r\n// `;\r\n// export const DEFAULT_QUERY = `# shift-option/alt-click on a query below to jump to it in the explorer\r\n// # option/alt-click on a field in the explorer to select all subfields\r\n// query npmPackage {\r\n//   npm {\r\n//     package(name: \"onegraph-apollo-client\") {\r\n//       name\r\n//       homepage\r\n//       downloads {\r\n//         lastMonth {\r\n//           count\r\n//         }\r\n//       }\r\n//     }\r\n//   }\r\n// }\r\n\r\n// query graphQLPackage {\r\n//   npm {\r\n//     package(name: \"graphql\") {\r\n//       name\r\n//       homepage\r\n//       downloads {\r\n//         lastMonth {\r\n//           count\r\n//         }\r\n//       }\r\n//     }\r\n//   }\r\n// }\r\n\r\n// fragment bundlephobiaInfo on BundlephobiaDependencyInfo {\r\n//   name\r\n//   size\r\n//   version\r\n//   history {\r\n//     dependencyCount\r\n//     size\r\n//     gzip\r\n//   }\r\n// }`;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}